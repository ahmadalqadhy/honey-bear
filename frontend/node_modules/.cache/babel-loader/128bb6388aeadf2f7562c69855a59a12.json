{"ast":null,"code":"var _jsxFileName = \"/Users/bryansillorequez/honey-bear/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\nimport configureStore from \"../store/\"; // We will use this to parse the user's session token\n\nimport jwt_decode from \"jwt-decode\"; // The session utility we just created\n\nimport { setAuthToken } from \"./util/session_api_util\"; // We have not created this action yet, but will do so in the next step\n\nimport { logout } from \"./actions/session_actions\";\nimport { Provider } from \"react-redux\";\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let store; // If a returning user has a session token stored in localStorage\n\n  if (localStorage.jwtToken) {\n    // Set the token as a common header for all axios requests\n    setAuthToken(localStorage.jwtToken); // Decode the token to obtain the user's information\n\n    const decodedUser = jwt_decode(localStorage.jwtToken); // Create a preconfigured state we can immediately add to our store\n\n    const preloadedState = {\n      session: {\n        isAuthenticated: true,\n        user: decodedUser\n      }\n    };\n    store = configureStore(preloadedState);\n    const currentTime = Date.now() / 1000; // If the user's token has expired\n\n    if (decodedUser.exp < currentTime) {\n      // Logout the user and redirect to the login page\n      store.dispatch(logout());\n      window.location.href = \"/login\";\n    }\n  } else {\n    // If this is a first time user, start with an empty store\n    store = configureStore({});\n  } // Render our root component and pass in the store as a prop\n\n\n  const root = document.getElementById(\"root\");\n  ReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(HashRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(App, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  })))), root);\n}); // ReactDOM.render(\n//   <React.StrictMode>\n//     <Provider store={store}>\n//       <HashRouter>\n//         <App />\n//       </HashRouter>\n//     </Provider>\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/bryansillorequez/honey-bear/frontend/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","HashRouter","configureStore","jwt_decode","setAuthToken","logout","Provider","document","addEventListener","store","localStorage","jwtToken","decodedUser","preloadedState","session","isAuthenticated","user","currentTime","Date","now","exp","dispatch","window","location","href","root","getElementById","render","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,WAA3B,C,CACA;;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CACA;;AACA,SAASC,YAAT,QAA6B,yBAA7B,C,CACA;;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEAC,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,MAAM;AAClD,MAAIC,KAAJ,CADkD,CAGlD;;AACA,MAAIC,YAAY,CAACC,QAAjB,EAA2B;AACzB;AACAP,IAAAA,YAAY,CAACM,YAAY,CAACC,QAAd,CAAZ,CAFyB,CAIzB;;AACA,UAAMC,WAAW,GAAGT,UAAU,CAACO,YAAY,CAACC,QAAd,CAA9B,CALyB,CAOzB;;AACA,UAAME,cAAc,GAAG;AACrBC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,eAAe,EAAE,IAAnB;AAAyBC,QAAAA,IAAI,EAAEJ;AAA/B;AADY,KAAvB;AAIAH,IAAAA,KAAK,GAAGP,cAAc,CAACW,cAAD,CAAtB;AAEA,UAAMI,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC,CAdyB,CAgBzB;;AACA,QAAIP,WAAW,CAACQ,GAAZ,GAAkBH,WAAtB,EAAmC;AACjC;AACAR,MAAAA,KAAK,CAACY,QAAN,CAAehB,MAAM,EAArB;AACAiB,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACD;AACF,GAtBD,MAsBO;AACL;AACAf,IAAAA,KAAK,GAAGP,cAAc,CAAC,EAAD,CAAtB;AACD,GA7BiD,CA8BlD;;;AACA,QAAMuB,IAAI,GAAGlB,QAAQ,CAACmB,cAAT,CAAwB,MAAxB,CAAb;AAEA5B,EAAAA,QAAQ,CAAC6B,MAAT,eACE,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAElB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF,EAQEgB,IARF;AAUD,CA3CD,E,CA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACAzB,aAAa,CAAC4B,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\nimport configureStore from \"../store/\";\n// We will use this to parse the user's session token\nimport jwt_decode from \"jwt-decode\";\n// The session utility we just created\nimport { setAuthToken } from \"./util/session_api_util\";\n// We have not created this action yet, but will do so in the next step\nimport { logout } from \"./actions/session_actions\";\nimport { Provider } from \"react-redux\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let store;\n\n  // If a returning user has a session token stored in localStorage\n  if (localStorage.jwtToken) {\n    // Set the token as a common header for all axios requests\n    setAuthToken(localStorage.jwtToken);\n\n    // Decode the token to obtain the user's information\n    const decodedUser = jwt_decode(localStorage.jwtToken);\n\n    // Create a preconfigured state we can immediately add to our store\n    const preloadedState = {\n      session: { isAuthenticated: true, user: decodedUser },\n    };\n\n    store = configureStore(preloadedState);\n\n    const currentTime = Date.now() / 1000;\n\n    // If the user's token has expired\n    if (decodedUser.exp < currentTime) {\n      // Logout the user and redirect to the login page\n      store.dispatch(logout());\n      window.location.href = \"/login\";\n    }\n  } else {\n    // If this is a first time user, start with an empty store\n    store = configureStore({});\n  }\n  // Render our root component and pass in the store as a prop\n  const root = document.getElementById(\"root\");\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <HashRouter>\n          <App />\n        </HashRouter>\n      </Provider>\n    </React.StrictMode>,\n    root\n  );\n});\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Provider store={store}>\n//       <HashRouter>\n//         <App />\n//       </HashRouter>\n//     </Provider>\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}