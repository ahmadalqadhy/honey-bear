{"ast":null,"code":"import * as APIUtil from '../util/session_api_util';\nimport jwt_decode from 'jwt-decode';\nexport const RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport const RECEIVE_SESSION_ERRORS = \"RECEIVE_SESSION_ERRORS\";\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const RECEIVE_USER_SIGN_IN = \"RECEIVE_USER_SIGN_IN\"; // We'll dispatch this when our user signs in\n\nexport const receiveCurrentUser = currentUser => ({\n  type: RECEIVE_CURRENT_USER,\n  currentUser\n}); // This will be used to redirect the user to the login page upon signup\n\nexport const receiveUserSignIn = () => ({\n  type: RECEIVE_USER_SIGN_IN\n}); // We dispatch this one to show authentication errors on the frontend\n\nexport const receiveErrors = errors => ({\n  type: RECEIVE_SESSION_ERRORS,\n  errors\n}); // When our user is logged out, we will dispatch this action to set isAuthenticated to false\n\nexport const logoutUser = () => ({\n  type: RECEIVE_USER_LOGOUT\n}); // Upon signup, dispatch the approporiate action depending on which type of response we receieve from the backend\n// export const signup = user => dispatch => (\n//     APIUtil.signup(user).then(() => (\n//         dispatch(receiveUserSignIn())\n//     ), err => (\n//         dispatch(receiveErrors(err.response.data))\n//     ))\n// );\n\nexport const signup = user => dispatch => APIUtil.signup(user).then(() => dispatch(receiveCurrent()), err => dispatch(receiveErrors(err.response.data))); // Upon login, set the session token and dispatch the current user. Dispatch errors on failure.\n\nexport const login = user => dispatch => APIUtil.login(user).then(res => {\n  const {\n    token\n  } = res.data;\n  localStorage.setItem('jwtToken', token);\n  APIUtil.setAuthToken(token);\n  const decoded = jwt_decode(token);\n  dispatch(receiveCurrentUser(decoded));\n}).catch(err => {\n  dispatch(receiveErrors(err.response.data));\n});\nexport const logout = () => dispatch => {\n  // Remove the token from local storage\n  localStorage.removeItem('jwtToken'); // Remove the token from the common axios header\n\n  APIUtil.setAuthToken(false); // Dispatch a logout action\n\n  dispatch(logoutUser());\n};","map":{"version":3,"sources":["/Users/ahmadalqadhy/Desktop/honey-bear/frontend/src/actions/session_actions.js"],"names":["APIUtil","jwt_decode","RECEIVE_USER_LOGOUT","RECEIVE_SESSION_ERRORS","RECEIVE_CURRENT_USER","RECEIVE_USER_SIGN_IN","receiveCurrentUser","currentUser","type","receiveUserSignIn","receiveErrors","errors","logoutUser","signup","user","dispatch","then","receiveCurrent","err","response","data","login","res","token","localStorage","setItem","setAuthToken","decoded","catch","logout","removeItem"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B,C,CAEP;;AACA,OAAO,MAAMC,kBAAkB,GAAGC,WAAW,KAAK;AAC9CC,EAAAA,IAAI,EAAEJ,oBADwC;AAE9CG,EAAAA;AAF8C,CAAL,CAAtC,C,CAKP;;AACA,OAAO,MAAME,iBAAiB,GAAG,OAAO;AACpCD,EAAAA,IAAI,EAAEH;AAD8B,CAAP,CAA1B,C,CAIP;;AACA,OAAO,MAAMK,aAAa,GAAGC,MAAM,KAAK;AACpCH,EAAAA,IAAI,EAAEL,sBAD8B;AAEpCQ,EAAAA;AAFoC,CAAL,CAA5B,C,CAKP;;AACA,OAAO,MAAMC,UAAU,GAAG,OAAO;AAC7BJ,EAAAA,IAAI,EAAEN;AADuB,CAAP,CAAnB,C,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMW,MAAM,GAAGC,IAAI,IAAIC,QAAQ,IAClCf,OAAO,CAACa,MAAR,CAAeC,IAAf,EAAqBE,IAArB,CAA0B,MACtBD,QAAQ,CAACE,cAAc,EAAf,CADZ,EAEGC,GAAG,IACFH,QAAQ,CAACL,aAAa,CAACQ,GAAG,CAACC,QAAJ,CAAaC,IAAd,CAAd,CAHZ,CADG,C,CAQP;;AACA,OAAO,MAAMC,KAAK,GAAGP,IAAI,IAAIC,QAAQ,IACjCf,OAAO,CAACqB,KAAR,CAAcP,IAAd,EAAoBE,IAApB,CAAyBM,GAAG,IAAI;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAYD,GAAG,CAACF,IAAtB;AACAI,EAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACAvB,EAAAA,OAAO,CAAC0B,YAAR,CAAqBH,KAArB;AACA,QAAMI,OAAO,GAAG1B,UAAU,CAACsB,KAAD,CAA1B;AACAR,EAAAA,QAAQ,CAACT,kBAAkB,CAACqB,OAAD,CAAnB,CAAR;AACH,CAND,EAOKC,KAPL,CAOWV,GAAG,IAAI;AACVH,EAAAA,QAAQ,CAACL,aAAa,CAACQ,GAAG,CAACC,QAAJ,CAAaC,IAAd,CAAd,CAAR;AACH,CATL,CADG;AAaP,OAAO,MAAMS,MAAM,GAAG,MAAMd,QAAQ,IAAI;AACpC;AACAS,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAFoC,CAGpC;;AACA9B,EAAAA,OAAO,CAAC0B,YAAR,CAAqB,KAArB,EAJoC,CAKpC;;AACAX,EAAAA,QAAQ,CAACH,UAAU,EAAX,CAAR;AACH,CAPM","sourcesContent":["import * as APIUtil from '../util/session_api_util';\nimport jwt_decode from 'jwt-decode';\n\nexport const RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport const RECEIVE_SESSION_ERRORS = \"RECEIVE_SESSION_ERRORS\";\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const RECEIVE_USER_SIGN_IN = \"RECEIVE_USER_SIGN_IN\";\n\n// We'll dispatch this when our user signs in\nexport const receiveCurrentUser = currentUser => ({\n    type: RECEIVE_CURRENT_USER,\n    currentUser\n});\n\n// This will be used to redirect the user to the login page upon signup\nexport const receiveUserSignIn = () => ({\n    type: RECEIVE_USER_SIGN_IN\n});\n\n// We dispatch this one to show authentication errors on the frontend\nexport const receiveErrors = errors => ({\n    type: RECEIVE_SESSION_ERRORS,\n    errors\n});\n\n// When our user is logged out, we will dispatch this action to set isAuthenticated to false\nexport const logoutUser = () => ({\n    type: RECEIVE_USER_LOGOUT\n});\n\n// Upon signup, dispatch the approporiate action depending on which type of response we receieve from the backend\n// export const signup = user => dispatch => (\n//     APIUtil.signup(user).then(() => (\n//         dispatch(receiveUserSignIn())\n//     ), err => (\n//         dispatch(receiveErrors(err.response.data))\n//     ))\n// );\nexport const signup = user => dispatch => (\n    APIUtil.signup(user).then(() => (\n        dispatch(receiveCurrent())\n    ), err => (\n        dispatch(receiveErrors(err.response.data))\n    ))\n);\n\n// Upon login, set the session token and dispatch the current user. Dispatch errors on failure.\nexport const login = user => dispatch => (\n    APIUtil.login(user).then(res => {\n        const { token } = res.data;\n        localStorage.setItem('jwtToken', token);\n        APIUtil.setAuthToken(token);\n        const decoded = jwt_decode(token);\n        dispatch(receiveCurrentUser(decoded))\n    })\n        .catch(err => {\n            dispatch(receiveErrors(err.response.data));\n        })\n)\n\nexport const logout = () => dispatch => {\n    // Remove the token from local storage\n    localStorage.removeItem('jwtToken')\n    // Remove the token from the common axios header\n    APIUtil.setAuthToken(false)\n    // Dispatch a logout action\n    dispatch(logoutUser())\n};\n"]},"metadata":{},"sourceType":"module"}